*mdlinks.txt*    Markdown Links: open and navigate                                *mdlinks*

OVERVIEW                                                                 *mdlinks-overview*
    mdlinks provides focused navigation and opening of Markdown entities:
      • Inline links:        [label](target)
      • Reference links:     [label][id] and [label][] with single-line defs [id]: ...
      • Footnotes:           [^id]  ↔  [^id]: ...
      • Autolinks/URLs:      <https://...> and bare http(s) URLs under/near the cursor

    Behavior:
      • If the cursor is not inside a link, mdlinks picks the **nearest link on the line**.
      • target starts with "#…"                 → jump to the matching heading in-buffer
      • target is a web URL (http/https/ftp/mailto) → open in the default browser
      • target is a local path:
          - text-like (*.md, *.txt, *.lua, *.json, *.toml, *.ya?ml) → open via :edit
          - everything else (PDFs, images, …) → open via system app (argv opener)

    Anchors (GitHub-style):
      • Lowercased, whitespace → '-', basic punctuation removed, duplicate-aware slugs:
        "# Foo", "# Foo"  →  anchors "foo" and "foo-1"
      • Works with `[go](#my-heading)` and level-aware `[go](## My Heading)` forms.

    Platforms:
      • Linux:           xdg-open
      • macOS:           open
      • Windows:         cmd.exe /c start "" <target>   (primary; respects associations)
                          fallback: powershell.exe -NoProfile -Command Start-Process
      • WSL:             wslview (if available) else powershell.exe Start-Process

INSTALLATION (Lazy.nvim)                                                     *mdlinks-install*
>
    {
      -- "dir" or "name" depending on your setup
      -- dir = vim.fn.expand("~/dev/mdlinks"),
      lazy = false, -- ensure command is available
      config = function()
        require("mdlinks").setup({
          keymap = "j",                    -- follow entity under/near cursor
          footnote_backref_key = "K",      -- optional footnote backref
          open_cmd = nil,                  -- nil = platform default (argv form)
          open_url_cmd = nil,              -- override to force specific browser
          anchor_levels = {1,2,3,4,5,6},
          debug = false,                   -- center view after jumps (zz)
        })
      end,
    }
<
KEYMAPS                                                                 *mdlinks-keymaps*
    Default suggestion:
      j        Follow under cursor (or nearest on line)
      K        (optional) Backref: from footnote definition to the first reference

    Both keys are configurable via setup:
      • keymap = "j"
      • footnote_backref_key = "K"

COMMANDS                                                                 *mdlinks-commands*
    :MdlinksFollow
        Follow the Markdown entity under the cursor; if none, pick the
        nearest entity on the current line. Notifies on error.

    :MdlinksFootnoteBack
        When on a footnote definition line  [^id]: ...  jumps back to the first
        occurrence of  [^id]  in the document.

CONFIGURATION                                                            *mdlinks-config*
    Lua:
      require("mdlinks").setup({ ... })     " see :h mdlinks-install

    Options:

      keymap                                    (string|nil)
          Normal-mode mapping for follow. If nil, no key is set.

      footnote_backref_key                      (string|nil)
          Mapping for backref from footnote definitions. If nil, not set.

      open_cmd                                  (string|string[]|nil)
          Override the opener command for files/paths (argv preferred).
          Examples:
            • Linux:   {"xdg-open"}
            • macOS:   {"open"}
            • Windows: {"cmd.exe","/c","start",""}   (primary)
                       {"powershell.exe","-NoProfile","-Command","Start-Process"}  (fallback)
          Default: nil (auto-detected per platform as above).

      open_url_cmd                              (string|string|nil)
          Like open_cmd, but specifically for web URLs. If nil, falls back to
          platform default (same as open_cmd).

      anchor_levels                             (integer[])
          ATX heading levels (1..6) considered for anchor jumps.
          Default: {1,2,3,4,5,6}.

      debug                                     (boolean|nil)
          If true: center screen (zz) after successful jumps. Default: false.

BEHAVIOR DETAILS                                                        *mdlinks-behavior*
    Entity selection order (cursor position aware, with line fallback):
      1. <https://...> or bare http(s) URL → open in browser
      2. Inline link [label](target)       → depending on target:
         • "#…" → jump by GH-style slug (duplicate-aware)
         • URL  → open in browser
         • else → treat as local path (text-like → :edit; otherwise system app)
      3. Reference link [label][id] / [label][]
         → resolves via a single-line definition:  [id]: target  ("title" ignored)
      4. Footnote [^id] → jump to  [^id]: ...  definition
      5. On a definition line  [^id]: ...  use :MdlinksFootnoteBack to jump back.

HEALTH CHECK                                                            *mdlinks-health*
    :checkhealth mdlinks
        Diagnostics for common setup issues:
          • Neovim version & OS/WSL detection
          • Config sanity (keymaps, anchor_levels, debug)
          • Openers availability (open_cmd/open_url_cmd argv & executables)
          • Parser self-test (recognizes url/heading/image/file on a sample line)

LIMITATIONS                                                           *mdlinks-limitations*
    • Reference definitions must be single-line:
        [id]: target "optional title"
      Multi-line definitions are not parsed.
    • Setext headings and complex Pandoc-style citations ([@key]) are out of scope.
      If you want such citations to be “followable”, keep a reference definition:
        [key]: https://example.org/paper

API                                                                      *mdlinks-api*
    Lua:
      require("mdlinks").setup(opts)
      -- Commands are auto-registered via plugin/mdlinks.lua
      require("mdlinks.nav").follow_under_cursor()
      require("mdlinks.nav").jump_footnote_backref()

CHANGELOG                                                             *mdlinks-changelog*
    0.2.0  Line fallback, GitHub-style duplicate-aware anchor slugs, :checkhealth.
    0.1.0  Initial release with Linux/macOS + Windows/WSL openers.

AUTHOR                                                                  *mdlinks-author*
    mdlinks – a minimalist, focused Markdown link follow plugin.
